a)

Enumerating objects: 11, done.
Counting objects: 100% (10/10), done.
Delta compression using up to 12 threads
Compressing objects: 100% (5/5), done.
Writing objects: 100% (7/7), 720 bytes | 720.00 KiB/s, done.
Total 7 (delta 2), reused 0 (delta 0)
remote: Resolving deltas: 100% (2/2), completed with 1 local object.
To https://github.com/mtw16-FSU/Assignment1
   3d373c9..9527971  master -> master

b) 5 commits have been performed so far. I used the git shortlog command to obtain this information.

c) The .gitignore file was last modified on Thu Jan 10 16:45:38 2019. I used git log .gitignore to obtain this information.

d) Two reasons why branches are used in a Git repository are to test various features seperately before commiting them to the final version of a program and to allow multiple contributors to work on the same program independently from each other and then merge their results at a later point in the development cycle.

e) The difference between git log and git status is that git log shows the entire history of commits for the current branch whereas git status shows the files that have been modified since the most recent commit.

f) The command to show the commits where Weapons.h was modified would be git log Weapons.h

g) The command to show the commits whose commit message contains the word file is git log --grep="file"

h) Inheritance refers to the ability for classes to inherit functions and variables from another class, called a parent class, which they can then use or modify as needed. The purpose of this in object-oriented programming is to group classes with similar shared characteristics under a broad category, i.e. an Animal class that is inherited by a Mammal class, Reptile Class, etc, and then the class that inherits from a parent class (a child class) can extend that core functionality with additional, more specific functions and data.

Polymorphism is the ability for a child class to implement a generic, unimplemented function that is declared by a parent class. For example, if a parent class Animal had an abstract function called makeNoise(), then a Dog class that inherits from it could implement that function by printing out a "bark" noise and a Cat class could implement it with a "Meow" noise.

Encapsulation is the concept of classes being self-contained. This means they maintain control of their data internally and only allow changes and access to data from other classes and functions through class functions that have built in error checking. For example, if a class had an integer variable named size, then that variable would be private and would only be able to be accessed outside of the class by using a getSize() method to obtain its value and a setSize() method to change its value.

i) The main difference between a Dictator and Lieutenants Workflow and an Integration Manager workflow is that the Integration Manager workflow only has one person who is responsible for merging developers' repositories into the master or "blessed" repository and managing any conflicts that arise from it, whereas a Dictators and Lieutenants workflow have multiple people (lieutenants) who are responsible for merging changes from their own smaller group of developers and a head developer (the dictator) who then is responsible for merging the changes from all the lieutenants. Essentially, the Integration Manager workflow is designed for relatively smaller scale projects where there are only a couple of developers, where the conflicts arising from merging can be handled by one person, whereas the Dictator and Lieutenants workflow is designed for massive projects with hundreds of developers and conflict resolution by one person for all developers is not feasible.

j) A team of 100 developers would benefit more from following the Dictator and Lieutenants workflow instead of the Centralized workflow because it would be easier to resolve conflicts when merging to the centeral/blessed repository. Under the Centralized workflow, all developers would have to waste time consulting with each other every time a conflict arose, massively slowing down the process and likely leading to confusion and disagreement that causes unnecessary chaos. The Dictator and Lieutenants workflow would resolve this by breaking the developers into smaller groups that are easier to manage and putting the "lieutenants" in charge of any conflicts that arise in that small group, and then having the "dictator" resolve conflicts within that small group of lieutenants. This would keep things organized and streamline the process of merging commits between all the developers.


Part 5:
The RoleGame prototype is using polymorphism by having all of the weapons inherit from the Weapons class and implementing the virtual method `double hit(double armor)` with the appropriate damage calculation for that class.

The Rolegame prototype is also using encapsulation by having the internal variables/state of each class be protected and only accessible by functions that provide correct error checking. For instance, all of the weapons inherit the `std::string getName()` method from the Weapons class, which returns the name of the corresponding weapon, and there is no other way to access or change the name of a weapon from outside its class. Additionally, whenever the `hit(double armor)` method is called for each class, the method provides correct error checking internally to make sure the damage caused is never negative and therefore produces expected behavior.
